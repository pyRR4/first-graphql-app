type Todo{
    id: ID!
    title: String!
    completed: Boolean!

    # nieladnie, ale w celach naukowych tylko
    userBase: User!
    userUrl: User!
    userDb: User!
}

type User{
    id: ID!
    name: String!
    email: String!
    login: String!

    # nieladnie, ale w celach naukowych tylko
    todosBase(page: Int, size: Int): [Todo!]!
    todosUrl(page: Int, size: Int): [Todo!]!
    todosDb(page: Int, size: Int): [Todo!]!
}

type Query {
    # nieladnie, ale w celach naukowych tylko
    todosUrl(page: Int, size: Int): [Todo!]!
    usersUrl(page: Int, size: Int): [User!]!
    todoUrl(id: ID!): [Todo!]
    userUrl(id: ID!): [User!]

    usersDb(page: Int, size: Int): [User!]!
    todosDb(page: Int, size: Int): [Todo!]!
    userDb(id: ID!): User
    todoDb(id: ID!): Todo

    todosBase(page: Int, size: Int): [Todo!]
    usersBase(page: Int, size: Int): [User!]
    todoBase(id: ID!): [Todo!]
    userBase(id: ID!): [User!]
}

type Mutation {
    addUser(email: String!, login: String!, name: String!): User!
    updateUser(id: ID!, email: String, login: String, name: String): User
    deleteUser(id: ID!): Boolean

    addTodo(title: String!, userId: ID!, completed: Boolean = false): Todo!
    updateTodo(id: ID!, title: String, completed: Boolean): Todo
    deleteTodo(id: ID!): Boolean
}